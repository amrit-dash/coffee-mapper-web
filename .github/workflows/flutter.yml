name: Flutter Web

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  id-token: write

env:
  FIREBASE_CLI_VERSION: 12.9.1

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.0'
          channel: 'stable'
          cache: true

      - name: Install Firebase CLI
        run: |
          curl -sL https://firebase.tools | bash
          firebase --version
      
      # Set up Firebase configuration
      - name: Create Firebase Config Files
        if: github.event_name == 'push'
        run: |
          # Create development configuration
          echo "${{ secrets.FIREBASE_OPTIONS_DEV }}" > lib/config/firebase_options_dev.dart
          
          # Create production configuration
          echo "${{ secrets.FIREBASE_OPTIONS_PROD }}" > lib/config/firebase_options_prod.dart
          
          # Create Firebase rules and config files
          echo "${{ secrets.FIREBASE_RULES }}" > firestore.rules
          echo "${{ secrets.FIREBASE_INDEXES }}" > firestore.indexes.json
          echo "${{ secrets.STORAGE_RULES }}" > storage.rules
          echo "${{ secrets.FIREBASE_RC }}" > .firebaserc
          echo "${{ secrets.FIREBASE_JSON }}" > firebase.json
          
          # Create directories for rules
          mkdir -p firestore/dev firestore/prod storage/dev storage/prod
          cp firestore.rules firestore/dev/firestore.rules
          cp firestore.rules firestore/prod/firestore.rules
          cp firestore.indexes.json firestore/dev/firestore.indexes.json
          cp firestore.indexes.json firestore/prod/firestore.indexes.json
          cp storage.rules storage/dev/storage.rules
          cp storage.rules storage/prod/storage.rules
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Format code
        run: dart format .
        
      - name: Verify formatting
        run: |
          # Format any generated files first
          dart format .
          # Now verify that everything is formatted
          dart format --output=none --set-exit-if-changed .
        
      - name: Analyze project source
        run: flutter analyze
        
      - name: Build web
        if: github.event_name == 'push'
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            flutter build web --release --web-renderer canvaskit --dart-define=ENVIRONMENT=production
          else
            flutter build web --release --web-renderer canvaskit --dart-define=ENVIRONMENT=development
          fi

      # Production Deployment
      - name: Deploy to Production
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          # Setup Firebase
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_PROD }}" > $HOME/prod-key.json
          export GOOGLE_APPLICATION_CREDENTIALS=$HOME/prod-key.json
          firebase login --no-localhost --token "${{ secrets.FIREBASE_TOKEN }}"
          firebase use prod
          
          # Deploy Rules
          firebase deploy --only firestore,storage
          
          # Deploy to all production sites
          firebase deploy --only hosting:cdt-koraput,hosting:coffeemapper,hosting:cdtkoraput,hosting:cdtdashboard
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          
      # Development Deployment
      - name: Deploy to Development
        if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
        run: |
          # Setup Firebase
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_DEV }}" > $HOME/dev-key.json
          export GOOGLE_APPLICATION_CREDENTIALS=$HOME/dev-key.json
          firebase login --no-localhost --token "${{ secrets.FIREBASE_TOKEN }}"
          firebase use dev
          
          # Deploy Rules
          firebase deploy --only firestore,storage
          
          # Deploy to development site
          firebase deploy --only hosting:coffee-mapper-dashboard
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }} 